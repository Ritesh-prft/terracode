name: Deploy to Environments

on:
  push:
    tags:
      - 'tag-v*'  # Trigger when a tag is pushed (e.g., "v1.0.0")

jobs:
  deploy_to_dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Deploy to Dev
        run: |
          echo "Deploying to Dev environment using tag ${{ github.ref }}"
          # Add your deployment commands for the Dev environment here.

      - name: Get Commit Messages for Changelog Update (Dev)
        run: |
          TAG_NAME="${{ github.ref_name }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="dev"

          # Get commit messages from the feature branch associated with the tag
          PR_NUMBER=$(echo $TAG_NAME | grep -oP '(?<=v)\d+')
          echo "PR Number: $PR_NUMBER"

          PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}"
          PR_SOURCE_BRANCH=$(curl -s $PR_URL | jq -r .head.ref)
          echo "Feature Branch: $PR_SOURCE_BRANCH"

          git fetch origin $PR_SOURCE_BRANCH
          COMMITS=$(git log origin/$PR_SOURCE_BRANCH --oneline)
          echo "Commits in feature branch $PR_SOURCE_BRANCH: $COMMITS"

          # Prepare changelog entry for DEV
          echo -e "\n---\n## [${TAG_NAME}] - $DATE\n### Deployed to: $ENVIRONMENT\n Dated: $DATE\n### Commit Message: $COMMITS\n\n---\n" >> CHANGELOG.md

          # Commit and push changes
          git add CHANGELOG.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing with --allow-unrelated-histories
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts

          # Resolve conflicts (choose local version for both files)
          git checkout --ours .github/workflows/deployment.yml  # Choose our (local) version for workflow file
          git checkout --ours CHANGELOG.md  # Choose our (local) version for changelog file

          # Add resolved files
          git add .github/workflows/deployment.yml CHANGELOG.md

          # Commit resolved changes
          git commit -m "Resolved merge conflicts and updated changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Push changes to the main branch
          git push origin HEAD:main


  deploy_to_qa:
    runs-on: ubuntu-latest
    needs: deploy_to_dev  # Ensure QA deployment waits for DEV deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Deploy to QA
        run: |
          echo "Deploying to QA environment using tag ${{ github.ref }}"
          # Add your deployment commands for the QA environment here.

      - name: Get Commit Messages for Changelog Update (QA)
        run: |
          TAG_NAME="${{ github.ref_name }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="qa"

          # Get commit messages from the feature branch associated with the tag
          PR_NUMBER=$(echo $TAG_NAME | grep -oP '(?<=v)\d+')
          echo "PR Number: $PR_NUMBER"

          PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}"
          PR_SOURCE_BRANCH=$(curl -s $PR_URL | jq -r .head.ref)
          echo "Feature Branch: $PR_SOURCE_BRANCH"

          git fetch origin $PR_SOURCE_BRANCH
          COMMITS=$(git log origin/$PR_SOURCE_BRANCH --oneline)
          echo "Commits in feature branch $PR_SOURCE_BRANCH: $COMMITS"

          # Prepare changelog entry for QA
          echo -e "\n---\n## [${TAG_NAME}] - $DATE\n### Deployed to: $ENVIRONMENT\n Dated: $DATE\n### Commit Message: $COMMITS\n\n---\n" >> CHANGELOG.md

          # Commit and push changes
          git add CHANGELOG.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing
          git fetch origin main
          git merge origin/main --no-edit

          # Push changes to the main branch
          git push origin HEAD:main  # Replace 'main' with the correct branch if different

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: deploy_to_qa  # Ensure PROD deployment waits for QA deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Deploy to PROD
        run: |
          echo "Deploying to PROD environment using tag ${{ github.ref }}"
          # Add your deployment commands for the PROD environment here.

      - name: Get Commit Messages for Changelog Update (Prod)
        run: |
          TAG_NAME="${{ github.ref_name }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="prod"

          # Get commit messages from the feature branch associated with the tag
          PR_NUMBER=$(echo $TAG_NAME | grep -oP '(?<=v)\d+')
          echo "PR Number: $PR_NUMBER"

          PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}"
          PR_SOURCE_BRANCH=$(curl -s $PR_URL | jq -r .head.ref)
          echo "Feature Branch: $PR_SOURCE_BRANCH"

          git fetch origin $PR_SOURCE_BRANCH
          COMMITS=$(git log origin/$PR_SOURCE_BRANCH --oneline)
          echo "Commits in feature branch $PR_SOURCE_BRANCH: $COMMITS"

          # Prepare changelog entry for PROD
          echo -e "\n---\n## [${TAG_NAME}] - $DATE\n### Deployed to: $ENVIRONMENT\n Dated: $DATE\n### Commit Message: $COMMITS\n\n---\n" >> CHANGELOG.md

          # Commit and push changes
          git add CHANGELOG.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing
          git fetch origin main
          git merge origin/main --no-edit

          # Push changes to the main branch
          git push origin HEAD:main  # Replace 'main' with the correct branch if different
