name: Deploy to Environments

on:
  push:
    tags:
      - 'tag-v*'  # Trigger when a tag is pushed (e.g., "v1.0.0")

jobs:
    deploy_to_dev:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout the repository
          uses: actions/checkout@v3

        - name: Set up Git
          run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"

        - name: Deploy to Dev
          run: |
            echo "Deploying to Dev environment using tag ${{ github.ref }}"
            # Add your deployment commands for the Dev environment here.

        - name: Get Commit Messages for Changelog Update (Dev)
          run: |
            TAG_NAME="${{ github.ref_name }}"
            DATE=$(date +'%Y-%m-%d')
            ENVIRONMENT="dev"
    
            PR_NUMBER=$(echo $TAG_NAME | grep -oP '(?<=v)\d+')
            echo "PR Number: $PR_NUMBER"
    
            PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}"
            PR_SOURCE_BRANCH=$(curl -s $PR_URL | jq -r .head.ref)
            echo "Feature Branch: $PR_SOURCE_BRANCH"
    
            git fetch origin $PR_SOURCE_BRANCH
            COMMITS=$(git log origin/$PR_SOURCE_BRANCH --oneline)
            echo "Commits in feature branch $PR_SOURCE_BRANCH: $COMMITS"
    
            # Prepare changelog entry for DEV
            echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n${COMMITS// /- }\n" >> CHANGELOG_Dev.md
    
            # Commit and push changes
            git add CHANGELOG_Dev.md
            git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"
    
            # Fetch and merge remote changes before pushing with --allow-unrelated-histories
            git fetch origin main
            git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts
    
            # Resolve conflicts:
            # For CHANGELOG_Dev.md, we prefer the local changes (ours strategy)
            git checkout --ours CHANGELOG_Dev.md  # Keep local changes in changelog
    
            # For deployment.yml, you will need to manually handle the conflict
            # We will leave the decision to the user, and they can resolve it manually.
            # echo "Merge conflicts found in .github/workflows/deployment.yml. Please resolve manually."

            # Add resolved files and commit the resolution
            git add CHANGELOG_Dev.md
            # git add .github/workflows/deployment.yml  # You will need to manually resolve this conflict
            
            # Commit the resolution
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"

            # Push the changes
            git push origin HEAD:main


    deploy_to_qa:
      runs-on: ubuntu-latest
      needs: deploy_to_dev  # Ensure QA deployment waits for DEV deployment
      steps:
        - name: Checkout the repository
          uses: actions/checkout@v3

        - name: Set up Git
          run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"

        - name: Checkout main branch  # Ensure we're on the main branch
          run: |
            git checkout main  # Switch to the main branch (default branch)

        - name: Pull latest changes from main
          run: |
            git fetch origin main  # Fetch the latest changes from the remote main branch
            git reset --hard origin/main  # Reset the working directory to match the remote main branch

        - name: Deploy to QA
          run: |
            echo "Deploying to QA environment using tag ${{ github.ref }}"
            # Add your deployment commands for the QA environment here.

        - name: Get Commit Messages for Changelog Update (QA)
          run: |
              TAG_NAME="${{ github.ref_name }}"
              DATE=$(date +'%Y-%m-%d')
              ENVIRONMENT="qa"
      
              PR_NUMBER=$(echo $TAG_NAME | grep -oP '(?<=v)\d+')
              echo "PR Number: $PR_NUMBER"
      
              PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}"
              PR_SOURCE_BRANCH=$(curl -s $PR_URL | jq -r .head.ref)
              echo "Feature Branch: $PR_SOURCE_BRANCH"
      
              git fetch origin $PR_SOURCE_BRANCH
              COMMITS=$(git log origin/$PR_SOURCE_BRANCH --oneline)
              echo "Commits in feature branch $PR_SOURCE_BRANCH: $COMMITS"
      
              # Prepare changelog entry for QA
              echo -e "\n---\n## [${TAG_NAME}] - $DATE\n### Deployed to: $ENVIRONMENT\n Dated: $DATE\n### Commit Message: $COMMITS\n\n---\n" >> CHANGELOG_Qa.md
      
              # Commit and push changes
              git add CHANGELOG_Qa.md
              git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"
      
              # Fetch and merge remote changes before pushing with --allow-unrelated-histories
              git fetch origin main
              git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts
      
              # Resolve conflicts by taking the local version of files (ours strategy)
              git checkout --ours CHANGELOG_Qa.md  # Keep local changes in changelog
      
              # Add resolved file and commit the resolution
              git add CHANGELOG_Qa.md
              git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
      
              # Push the changes
              git push origin HEAD:main

    deploy_to_prod:
      runs-on: ubuntu-latest
      needs: deploy_to_qa  # Ensure PROD deployment waits for QA deployment
      steps:
        - name: Checkout the repository
          uses: actions/checkout@v3

        - name: Set up Git
          run: |
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"

        - name: Deploy to PROD
          run: |
            echo "Deploying to PROD environment using tag ${{ github.ref }}"
            # Add your deployment commands for the PROD environment here.

        - name: Get Commit Messages for Changelog Update (PROD)
          run: |
              TAG_NAME="${{ github.ref_name }}"
              DATE=$(date +'%Y-%m-%d')
              ENVIRONMENT="prod"
      
              PR_NUMBER=$(echo $TAG_NAME | grep -oP '(?<=v)\d+')
              echo "PR Number: $PR_NUMBER"
      
              PR_URL="https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}"
              PR_SOURCE_BRANCH=$(curl -s $PR_URL | jq -r .head.ref)
              echo "Feature Branch: $PR_SOURCE_BRANCH"
      
              git fetch origin $PR_SOURCE_BRANCH
              COMMITS=$(git log origin/$PR_SOURCE_BRANCH --oneline)
              echo "Commits in feature branch $PR_SOURCE_BRANCH: $COMMITS"
      
              # Prepare changelog entry for PROD
              echo -e "\n---\n## [${TAG_NAME}] - $DATE\n### Deployed to: $ENVIRONMENT\n Dated: $DATE\n### Commit Message: $COMMITS\n\n---\n" >> CHANGELOG_Prod.md
      
              # Commit and push changes
              git add CHANGELOG_Prod.md
              git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"
      
              # Fetch and merge remote changes before pushing with --allow-unrelated-histories
              git fetch origin main
              git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts
      
              # Resolve conflicts by taking the local version of files (ours strategy)
              git checkout --ours CHANGELOG_Prod.md  # Keep local changes in changelog
      
              # Add resolved file and commit the resolution
              git add CHANGELOG_Prod.md
              git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
      
              # Push the changes
              git push origin HEAD:main
