name: Deploy and Update Changelog

on:
  pull_request:
    branches:
      - main  # Trigger when a PR is targeting the 'main' branch
    types:
      - opened        # Trigger when the PR is created
      - synchronize  # Trigger when the PR is updated (e.g., new commits pushed)
      - reopened     # Trigger when a PR is reopened

jobs:
  create_tag_and_deploy:
    if: |
      github.event.pull_request.action == 'opened' ||
      github.event.pull_request.action == 'reopened' ||
      github.event.pull_request.action == 'synchronize' ||
      github.event.pull_request.state == 'open'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # Checkout the feature branch (PR source branch)
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git for tagging
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Fetch tags from remote
        run: |
          git fetch --tags

      - name: Get latest tag and determine version increment
        id: get_version
        run: |
          # Get the latest tag in the repo
          LATEST_TAG=$(git tag --list 'tag-v*' | sort -V | tail -n 1)

          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="tag-v0.0.0"
          fi

          # Parse version components (e.g., tag-v1.0.0 -> MAJOR=1, MINOR=0, PATCH=0)
          VERSION="${LATEST_TAG//tag-v/}"
          VERSION_PARTS=(${VERSION//./ })
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Check commit message for version increment and modify accordingly
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          
          if [[ "$COMMIT_MESSAGE" == *MAJOR* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" == *MINOR* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" == *PATCH* ]]; then
            PATCH=$((PATCH + 1))
          fi

          # Set new tag
          NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"

          # Ensure the tag is unique (increment PATCH if necessary)
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"
          done

          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag from feature branch
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git tag $NEW_TAG
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin $NEW_TAG
          echo "Created and pushed tag: $NEW_TAG"

      - name: Fetch PR commit message using GitHub API
        id: pr_commit_message
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMIT_MESSAGE=$(curl -s \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
            | jq -r '.title + " " + .body')

          # Set commit message for later use
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "Fetched Commit Message: $COMMIT_MESSAGE"

      - name: Checkout main branch
        run: |
          git checkout main
          git pull origin main  # Ensure we're up-to-date with the latest main

      - name: Stash untracked files (if any)
        run: |
          git stash --include-untracked

      - name: Deploy to Dev using tag
        run: |
          echo "Deploying to Dev environment using tag ${{ env.NEW_TAG }}"
          # Checkout the tag (not main) for deployment
          git checkout ${{ env.NEW_TAG }}
          # Add your deployment commands for the Dev environment here.
          echo "Deployed to Dev using tag: ${{ env.NEW_TAG }}"

      - name: Update Changelog for Dev Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="dev"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Append to the changelog file for Dev deployment
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- ${COMMIT_MESSAGE}\n" >> CHANGELOG_Dev.md

          # Stage and commit the changelog update (only on main branch)
          git checkout main
          git add CHANGELOG_Dev.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Merge remote changes and push to main
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts

          # Check for conflicts and resolve
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours CHANGELOG_Dev.md  # Keep local changes in changelog

            # Add resolved files and commit the resolution
            git add CHANGELOG_Dev.md
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          fi

          # Push changes to the main branch
          git push origin main

      - name: Restore stashed files
        run: |
          git stash pop

          
      - name: Deploy to QA using tag
        run: |
          echo "Deploying to QA environment using tag ${{ env.NEW_TAG }}"
          # Checkout the tag (not main) for deployment
          git checkout ${{ env.NEW_TAG }}
          # Add your deployment commands for the QA environment here.
          echo "Deployed to QA using tag: ${{ env.NEW_TAG }}"

      - name: Update Changelog for QA Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="qa"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Append to the changelog file for QA deployment
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- ${COMMIT_MESSAGE}\n" >> CHANGELOG_Qa.md

          # Stage and commit the changelog update (only on main branch)
          git checkout main
          git add CHANGELOG_Qa.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Merge remote changes and push to main
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts

          # Check for conflicts and resolve
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours CHANGELOG_Qa.md  # Keep local changes in changelog

            # Add resolved files and commit the resolution
            git add CHANGELOG_Qa.md
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          fi

          # Push changes to the main branch
          git push origin main

      - name: Deploy to PROD using tag
        run: |
          echo "Deploying to PROD environment using tag ${{ env.NEW_TAG }}"
          # Checkout the tag (not main) for deployment
          git checkout ${{ env.NEW_TAG }}
          # Add your deployment commands for the PROD environment here.
          echo "Deployed to PROD using tag: ${{ env.NEW_TAG }}"

      - name: Update Changelog for Prod Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="prod"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Append to the changelog file for PROD deployment
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- ${COMMIT_MESSAGE}\n" >> CHANGELOG_Prod.md

          # Stage and commit the changelog update (only on main branch)
          git checkout main
          git add CHANGELOG_Prod.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Merge remote changes and push to main
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts

          # Check for conflicts and resolve
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours CHANGELOG_Prod.md  # Keep local changes in changelog

            # Add resolved files and commit the resolution
            git add CHANGELOG_Prod.md
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          fi

          # Push changes to the main branch
          git push origin main

      - name: Restore stashed changes
        run: |
          git stash pop
