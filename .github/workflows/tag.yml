on:
  workflow_dispatch:
    inputs:
      description_of_changes:
        description: 'Enter Description of changes'
        required: true
        type: string
      files_changed:
        description: 'Enter Files Changed'
        required: true
        type: string
      reason_for_change:
        description: 'Enter Reason for Change'
        required: true
        type: string
      task_ticket_issue:
        description: 'Enter Task/Ticket/Issue'
        required: true
        type: string
      tag_to_deploy:
        description: 'Enter the tag to deploy (e.g., tag-v1.0.0)'
        required: true
        type: string
  pull_request:
    branches:
      - main  # Trigger when a PR is targeting the 'main' branch
    types:
      - opened        # Trigger when the PR is created
      - synchronize  # Trigger when the PR is updated (e.g., new commits pushed)
      - reopened     # Trigger when a PR is reopened
      - edited      # Trigger when a PR is edited
  


jobs:
  validate_pr_description:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Fetch PR description if not manually provided
        id: pr-description
        run: |
          # Check if the workflow is triggered manually
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Using manual inputs"

            # Capture manual inputs
            DESCRIPTION_OF_CHANGES="${{ github.event.inputs.description_of_changes }}"
            FILES_CHANGED="${{ github.event.inputs.files_changed }}"
            REASON_FOR_CHANGE="${{ github.event.inputs.reason_for_change }}"
            TASK_TICKET_ISSUE="${{ github.event.inputs.task_ticket_issue }}"

            echo "PR Description: $DESCRIPTION_OF_CHANGES"
            
            # Ensure all required manual inputs are provided
            if [[ -z "$DESCRIPTION_OF_CHANGES" || -z "$FILES_CHANGED" || -z "$REASON_FOR_CHANGE" || -z "$TASK_TICKET_ISSUE" ]]; then
              echo "Error: All required fields (Description of changes, Files Changed, Reason for Change, Task/Ticket/Issue) must be provided for manual trigger."
              exit 1
            fi
          else
            # If triggered by a PR, fetch the PR description
            PR_NUMBER=${{ github.event.pull_request.number }}
            echo "Fetching PR description from PR #$PR_NUMBER"
            PR_DESCRIPTION=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
              | jq -r '.body')

            echo "PR Description: $PR_DESCRIPTION"
          fi
          echo "$PR_DESCRIPTION" > pr_description.txt

      - name: Validate PR Description
        run: |
          # Read the PR description from the file
          PR_DESCRIPTION=$(cat pr_description.txt)

          # Debug output to see the raw PR_DESCRIPTION
          echo "Raw PR Description:"
          echo "$PR_DESCRIPTION"  # Debugging output to inspect

          # Trim leading/trailing spaces and newlines
          PR_DESCRIPTION=$(echo "$PR_DESCRIPTION" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Debug output to see the trimmed PR_DESCRIPTION
          echo "Trimmed PR Description:"
          echo "$PR_DESCRIPTION"  # Debugging output to inspect after trimming

          # Split into lines and print each one separately to debug line content
          echo "Printing each line separately for debugging:"
          echo "$PR_DESCRIPTION" | while IFS= read -r line; do
            echo "Line: '$line'"
          done

          check_section() {
              section_name="$1"
              line=$(echo "$PR_DESCRIPTION" | grep -A 1 "### $section_name ###" | tail -n 1)
              
              # Check if the line is empty or just spaces after the colon
              if [[ "$line" =~ ^\s*:?\s*$ ]]; then
                  echo "Error: '$section_name' section is missing or empty."
                  exit 1
              fi
          }

          # PR Description Validation
          echo "Checking PR Description..."

          # Validate each section
          check_section "Description of changes"
          check_section "Files Changed"
          check_section "Reason for Change"
          check_section "Task/Ticket/Issue"

          echo "PR Description is valid!"



          echo "PR Description is valid!"


  create_tag_and_deploy:
    needs: validate_pr_description
    if: |
      github.event.pull_request.action == 'opened' ||
      github.event.pull_request.action == 'reopened' ||
      github.event.pull_request.action == 'synchronize' ||
      github.event.pull_request.state == 'open'||
      github.event_name == 'workflow_dispatch' 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # Checkout the feature branch (PR source branch)
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git for tagging
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Fetch tags from remote
        run: |
          git fetch --tags

      - name: Get latest tag and determine version increment
        id: get_version
        run: |
          # Debug: Print input for the tag to deploy
          echo "Manual tag input: ${{ github.event.inputs.tag_to_deploy }}"

          # Check if manual tag is provided
          if [ -n "${{ github.event.inputs.tag_to_deploy }}" ]; then
            TAG_TO_DEPLOY="${{ github.event.inputs.tag_to_deploy }}"
          else
            # Get the latest tag in the repo
            LATEST_TAG=$(git tag --list 'tag-v*' | sort -V | tail -n 1)

            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="tag-v0.0.0"
            fi

            # Parse version components (e.g., tag-v1.0.0 -> MAJOR=1, MINOR=0, PATCH=0)
            VERSION="${LATEST_TAG//tag-v/}"
            VERSION_PARTS=(${VERSION//./ })
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"

            # Check commit message for version increment and modify accordingly
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            
            if [[ "$COMMIT_MESSAGE" == *MAJOR* ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [[ "$COMMIT_MESSAGE" == *MINOR* ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif [[ "$COMMIT_MESSAGE" == *PATCH* ]]; then
              PATCH=$((PATCH + 1))
            fi

            # Set new tag
            NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"

            # Ensure the tag is unique (increment PATCH if necessary)
            while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
              PATCH=$((PATCH + 1))
              NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"
            done

            TAG_TO_DEPLOY=$NEW_TAG
          fi

          echo "Tag to deploy: $TAG_TO_DEPLOY"
          echo "TAG_TO_DEPLOY=$TAG_TO_DEPLOY" >> $GITHUB_ENV


      - name: Create and push tag from feature branch
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git tag $NEW_TAG
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin $NEW_TAG
          echo "Created and pushed tag: $NEW_TAG"

      - name: Fetch PR commit message using GitHub API
        id: pr_commit_message
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMIT_MESSAGE=$(curl -s \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}" \
            | jq -r '.title + " " + .body')

          # Sanitize the commit message: Remove newlines and extra spaces
          COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | tr -d '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Set commit message for later use, ensuring itâ€™s valid for the environment variable
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "Fetched Commit Message: $COMMIT_MESSAGE"

          
      - name: Checkout the tag for deployment
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git checkout $NEW_TAG
          echo "Checked out tag: $NEW_TAG"
          ls -alh  # List files to verify the tag content

      - name: Deploy to Dev
        run: |
          echo "Deploying to Dev environment using tag ${{ env.NEW_TAG }}"
          dir
          ls
          # Add your deployment commands for the Dev environment here.


      # - name: Update Changelog for Dev Deployment
      #   run: |
      #     TAG_NAME="${{ env.NEW_TAG }}"
      #     DATE=$(date +'%Y-%m-%d')
      #     ENVIRONMENT="dev"
      #     COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

      #     # Ensure we're on the main branch to update the changelog file
      #     git checkout main
      #     git pull origin main

      #     # View the content of the changelog before appending
      #     echo "Content of CHANGELOG_Dev.md before appending:"
      #     cat CHANGELOG_Dev.md

      #     # Add a changelog entry for the Dev deployment with PR commit message
      #     echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- Deployed version ${TAG_NAME}\n- Commit Message: $COMMIT_MESSAGE\n" >> CHANGELOG_Dev.md

      #     # View the content of the changelog after appending
      #     echo "Content of CHANGELOG_Dev.md after appending:"
      #     cat CHANGELOG_Dev.md

      #     # Commit and push changes
      #     git add CHANGELOG_Dev.md
      #     git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

      #     # Fetch and merge remote changes before pushing
      #     git fetch origin main
      #     git merge origin/main --no-edit --allow-unrelated-histories || true

      #     # Handle conflicts manually if necessary
      #     if git ls-files -u | grep -q .; then
      #       echo "Merge conflicts detected, resolving..."
      #       git checkout --ours .github/workflows/tag.yml  # Keep local changes in workflow
      #       git checkout --ours CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md  # Keep local changes in changelog
      #       git add CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md .github/workflows/tag.yml
      #       git commit -m "Resolved conflicts for changelog and workflows"
      #     fi

      #     # Push the changes
      #     git push origin HEAD:main

      - name: Update Changelog for Dev Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="dev"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Ensure we're on the main branch to update the changelog file
          git checkout main
          git pull origin main

          # Add a changelog entry for the Dev deployment with PR commit message
          echo -e "\n#####\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- Deployed version ${TAG_NAME}\n- Commit Message: $COMMIT_MESSAGE\n" >> CHANGELOG_Dev.md

          # Commit and push changes
          git add CHANGELOG_Dev.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true

          # Handle conflicts manually if necessary
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours .github/workflows/tag.yml  # Keep local changes in workflow
            git checkout --ours CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md  # Keep local changes in changelog
            git add CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md .github/workflows/tag.yml
            git commit -m "Resolved conflicts for changelog and workflows"
          fi

          # Push the changes
          git push origin HEAD:main


      - name: Checkout the tag for deployment
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git checkout --detach $NEW_TAG
          echo "Checked out tag: $NEW_TAG"
          ls -alh  # List files to verify the tag content

      - name: Deploy to QA
        run: |
          echo "Deploying to QA environment using tag ${{ env.NEW_TAG }}"
          dir
          ls
          # Add your deployment commands for the QA environment here.

      - name: Update Changelog for Qa Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="qa"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Ensure we're on the main branch to update the changelog file
          git checkout main
          git pull origin main

          # Add a changelog entry for the Qa deployment with PR commit message
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- Deployed version ${TAG_NAME}\n- Commit Message: $COMMIT_MESSAGE\n" >> CHANGELOG_Qa.md

          # Commit and push changes
          git add CHANGELOG_Qa.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true

          # Handle conflicts manually if necessary
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours .github/workflows/tag.yml  # Keep local changes in workflow
            git checkout --ours CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md  # Keep local changes in changelog
            git add CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md .github/workflows/tag.yml
            git commit -m "Resolved conflicts for changelog and workflows"
          fi

          # Push the changes
          git push origin HEAD:main

      - name: Checkout the tag for deployment
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git checkout --detach $NEW_TAG
          echo "Checked out tag: $NEW_TAG"
          ls -alh  # List files to verify the tag content

      - name: Deploy to PROD
        run: |
          echo "Deploying to PROD environment using tag ${{ env.NEW_TAG }}"
          dir
          ls
          # Add your deployment commands for the PROD environment here.

      - name: Update Changelog for Prod Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="prod"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Ensure we're on the main branch to update the changelog file
          git checkout main
          git pull origin main

          # Add a changelog entry for the Prod deployment with PR commit message
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- Deployed version ${TAG_NAME}\n- Commit Message: $COMMIT_MESSAGE\n" >> CHANGELOG_Prod.md

          # Commit and push changes
          git add CHANGELOG_Prod.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true

          # Handle conflicts manually if necessary
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours .github/workflows/tag.yml  # Keep local changes in workflow
            git checkout --ours CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md  # Keep local changes in changelog
            git add CHANGELOG_Dev.md CHANGELOG_Qa.md CHANGELOG_Prod.md .github/workflows/tag.yml
            git commit -m "Resolved conflicts for changelog and workflows"
          fi

          # Push the changes
          git push origin HEAD:main