name: Create Tag and Deploy to Environments

on:
  pull_request:
    branches:
      - main  # Trigger when a PR is merged into the main branch
    types:
      - closed
  push:
    tags:
      - 'tag-v*'  # Trigger when a tag is pushed (e.g., "tag-v1.0.0")

jobs:
  create_tag:
    if: github.event.pull_request.merged == true  # Run only if the PR is merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git for tagging
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Fetch tags from remote
        run: |
          git fetch --tags

      - name: Get latest tag and determine version increment
        id: get_version
        run: |
          LATEST_TAG=$(git tag --list 'tag-v*' | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="tag-v0.0.0"
          fi
          
          # Parse version components
          VERSION="${LATEST_TAG//tag-v/}"
          VERSION_PARTS=(${VERSION//./ })
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Check if the commit message contains version increment keywords
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          
          if [[ "$COMMIT_MESSAGE" == *MAJOR* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" == *MINOR* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" == *PATCH* ]]; then
            PATCH=$((PATCH + 1))
          fi

          # Set new tag
          NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git tag $NEW_TAG
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin $NEW_TAG
          echo "Created and pushed tag: $NEW_TAG"

  deploy_to_env:
    needs: create_tag  # Ensure tag creation is completed before deployment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, qa, prod]
    steps:
      - name: Checkout the repository at tag
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}  # Checkout the tag created earlier

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Deploy to ${{ matrix.environment }}
        run: |
          echo "Deploying to ${{ matrix.environment }} environment using tag ${{ github.ref }}"
          # Replace this with your deployment commands for the environment
          # Example: deploy-command ${{ matrix.environment }} ${{ github.ref }}

      - name: Get Commit Message for Changelog Update ({{ matrix.environment }})
        run: |
          TAG_NAME="${{ github.ref_name }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="${{ matrix.environment }}"

          # Fetch the commit message associated with the tag
          COMMIT_MESSAGE=$(git log -1 --pretty=%B "$TAG_NAME")
          echo "Commit Message for tag $TAG_NAME: $COMMIT_MESSAGE"

          # Prepare changelog entry for the environment
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- ${COMMIT_MESSAGE}\n" >> CHANGELOG.md

          # Commit and push changes
          git add CHANGELOG.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"

          # Fetch and merge remote changes before pushing with --allow-unrelated-histories
          git fetch origin main
          git merge origin/main --no-edit --allow-unrelated-histories || true  # Avoid failing due to conflicts

          # Check for conflicts and resolve (keeping our local changes in these files)
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."
            git checkout --ours CHANGELOG.md  # Keep local changes in changelog

            # Add resolved file and commit the resolution
            git add CHANGELOG.md
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          fi

          # Push changes to the main branch
          git push origin HEAD:main
