name: Tag and Deploy

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - synchronize
      - reopened

jobs:
  create_tag_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}  # Checkout the feature branch (PR source branch)
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Git for tagging and commit
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Fetch tags from remote
        run: git fetch --tags

      - name: Get latest tag and determine version increment
        id: get_version
        run: |
          LATEST_TAG=$(git tag --list 'tag-v*' | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="tag-v0.0.0"
          fi

          VERSION="${LATEST_TAG//tag-v/}"
          VERSION_PARTS=(${VERSION//./ })
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          if [[ "$COMMIT_MESSAGE" == *MAJOR* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" == *MINOR* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$COMMIT_MESSAGE" == *PATCH* ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"

          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEW_TAG="tag-v${MAJOR}.${MINOR}.${PATCH}"
          done

          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag from feature branch
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          NEW_TAG="${{ env.NEW_TAG }}"
          git tag $NEW_TAG
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin $NEW_TAG

      - name: Deploy to Dev
        run: |
          echo "Deploying to Dev using tag ${{ env.NEW_TAG }}"
          # Add your deployment commands for Dev here

      - name: Update Changelog for Dev Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="dev"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Add a changelog entry for Dev deployment
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- Deploying version ${TAG_NAME}\n- Commit Message: $COMMIT_MESSAGE\n" >> CHANGELOG_Dev.md

          # Commit and push changes to the main branch
          git add CHANGELOG_Dev.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          git fetch origin main
          git checkout main  # Ensure we're on the main branch

          # Merge changes from main (to prevent push conflicts)
          git merge origin/main --no-edit --allow-unrelated-histories || true

          # Resolve conflicts if any
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."

            # Automatically resolve conflicts: keep the local version of changelog file
            git checkout --ours CHANGELOG_Dev.md
            git add CHANGELOG_Dev.md

            # Resolve conflict in the workflow file (tag.yml)
            git checkout --ours .github/workflows/tag.yml
            git add .github/workflows/tag.yml

            # Commit the resolution
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          fi

          # Push the resolved changelog to the main branch
          git push origin main

      # Step 8: Deploy to QA
      - name: Deploy to QA
        run: |
          echo "Deploying to QA using tag ${{ env.NEW_TAG }}"
          # Add your deployment commands for QA here

      - name: Update Changelog for QA Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="qa"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Add a changelog entry for QA deployment
          echo -e "\n## [${TAG_NAME}] - $DATE\n### Deployed to:\n- **${ENVIRONMENT}**: ${DATE}\n### Changes:\n- Commit Message: $COMMIT_MESSAGE\n" >> CHANGELOG_QA.md

          # Commit and push changes to the main branch
          git add CHANGELOG_QA.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          git fetch origin main
          git checkout main  # Ensure we're on the main branch

          # Merge changes from main (to prevent push conflicts)
          git merge origin/main --no-edit --allow-unrelated-histories || true

          # Resolve conflicts if any
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."

            # Automatically resolve conflicts: keep the local version of changelog file
            git checkout --ours CHANGELOG_QA.md
            git add CHANGELOG_QA.md

            # Resolve conflict in the workflow file (tag.yml)
            git checkout --ours .github/workflows/tag.yml
            git add .github/workflows/tag.yml

            # Commit the resolution
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          fi

          # Push the resolved changelog to the main branch
          git push origin main

      # Step 10: Deploy to Prod
      - name: Deploy to Prod
        run: |
          echo "Deploying to Prod using tag ${{ env.NEW_TAG }}"
          # Add your deployment commands for Prod here

      - name: Update Changelog for Prod Deployment
        run: |
          TAG_NAME="${{ env.NEW_TAG }}"
          DATE=$(date +'%Y-%m-%d')
          ENVIRONMENT="prod"
          COMMIT_MESSAGE="${{ env.COMMIT_MESSAGE }}"

          # Add a changelog entry for Prod deployment
          echo -e "\n---\n## [${TAG_NAME}] - $DATE\n### Deployed to: $ENVIRONMENT\n### Changes:\n- Commit Message: $COMMIT_MESSAGE\n---\n" >> CHANGELOG_Prod.md

          # Commit and push changes to the main branch
          git add CHANGELOG_Prod.md
          git commit -m "Update changelog for ${TAG_NAME} deployment to ${ENVIRONMENT}"
          git fetch origin main
          git checkout main  # Ensure we're on the main branch

          # Merge changes from main (to prevent push conflicts)
          git merge origin/main --no-edit --allow-unrelated-histories || true

          # Resolve conflicts if any
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected, resolving..."

            # Automatically resolve conflicts: keep the local version of changelog file
            git checkout --ours CHANGELOG_Prod.md
            git add CHANGELOG_Prod.md

            # Resolve conflict in the workflow file (tag.yml)
            git checkout --ours .github/workflows/tag.yml
            git add .github/workflows/tag.yml

            # Commit the resolution
            git commit -m "Resolved merge conflicts for ${TAG_NAME} deployment to ${
